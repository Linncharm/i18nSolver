import fs from 'fs-extra';
import path from 'path';

// Path to source JSON config file
const CONFIG_PATH = path.resolve(__dirname, '../config/i18n-config.json');

// Output paths for generated TS files
const NODE_MAP_CONFIG_PATH = path.resolve(__dirname, '../config/default-nodemap-config.ts');
const PARSING_CONFIG_PATH = path.resolve(__dirname, '../config/default-parsing-config.ts');

// Generate TS config files from JSON
function generateConfigFiles() {
  try {
    // Read the unified config file
    const config = fs.readJsonSync(CONFIG_PATH);

    // Generate node type map config
    const nodeMapContent = `// Auto-generated from ${path.basename(CONFIG_PATH)}
// Do not edit this file directly

export const defaultNodeTypeMap: Record<string, string> = ${JSON.stringify(config.nodeTypeMap, null, 2)};

export const defaultNodeType = 'Text';
`;

    // Generate parsing config
    const parsingContent = `// Auto-generated from ${path.basename(CONFIG_PATH)}
// Do not edit this file directly

export const defaultParsingConfig = ${JSON.stringify(config.parsing, null, 2)};
`;

    // Write the files
    fs.writeFileSync(NODE_MAP_CONFIG_PATH, nodeMapContent);
    fs.writeFileSync(PARSING_CONFIG_PATH, parsingContent);

    console.log(`✅ Config files generated successfully:`);
    console.log(`   - ${path.relative(process.cwd(), NODE_MAP_CONFIG_PATH)}`);
    console.log(`   - ${path.relative(process.cwd(), PARSING_CONFIG_PATH)}`);
  } catch (error) {
    console.error('❌ Failed to generate config files:', error);
    process.exit(1);
  }
}

// Execute the generation function
generateConfigFiles();
